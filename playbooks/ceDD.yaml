-
  name: Deploy Calculate Engine in the single box
  hosts: webserver

  environment:
    PROJECT_DIR: /home/LDC

  vars:

  tasks:

    - name: Install Required Tools
      apt: name={{item}} state=present update_cache=yes
      with_items:
        - python-lxml

    - name: Ensure a configuration directory exists in $HOME/app
      file:
        path: $HOME/app/conf
        state: directory

    - name: Copy component configuration file
      copy:
        src:  purchaseOrder.xml
        dest: $HOME/app/conf/purchaseOrder.xml

    - name: Clear the input.txt
      file:
        state: absent
        path: /home/LDC/app/conf/config.txt

    - name: Create a file which contain list of all the parsed files
      file:
        path: /home/LDC/app/conf/config.txt
        state: touch

    #- name: Read the component configuration file
    #  xml:
    #    path: $HOME/app/conf/purchaseOrder.xml
    #    xpath: /PurchaseOrders/PurchaseOrder/Items/Item
    #    content: text
    #  register: hits
    #- debug:
    #    var: hits

    - name: Read component configuration on the target machine to parse the list of other configuration, sql and scripting files
      xml:
        path: $HOME/app/conf/purchaseOrder.xml
        xpath: /PurchaseOrders/PurchaseOrder/Items/Item
        content: attribute
        attribute: PartNumber
      register: xmlresp

    #- debug:
    #    var : xmlresp

    #- name: Storing the content of the file
    #  set_fact:
    #    fileNameList: "{{xmlresp.matches}}"

    #- name: Record Files to look up for the tokens
    #  debug: var=xmlresp.matches[{{ item }}].Item.PartNumber
    #  with_sequence: start=0 end={{xmlresp.matches | length -1}}

    #- name: List out all other configuration in configFiles.txt
    #  copy:
    #    dest: $HOME/app/conf/configFiles.txt
        #content: "Jai Ganesh Ji Maharaj Ki Jai"
    #    content: "{{item.Item.PartNumber}}"
    #  loop: "{{xmlresp.matches}}"





    - name: Write down the list of files to be read for tokens
      lineinfile: path=/home/LDC/app/conf/input.txt line={{item.Item.PartNumber}} create=yes state=present
      loop: "{{xmlresp.matches}}"

    #- name: create a file to store the list of configuration files
    #  shell: cat > /home/LDC/app/conf/input.txt

    #- name: Write down the list of files to be read for tokens
    #  shell: echo '{{item.Item.PartNumber}}' >> /home/LDC/app/conf/input.txt
    #  loop: "{{xmlresp.matches}}"

    - name: Fetch the file from the remote machine
      fetch:
        src: /home/LDC/app/conf/input.txt
        dest: "/home/LDC/ansible-inventory-check/conf/{{inventory_hostname}}/"
        flat: true

    - name: Ensure a configuration directory exists in $HOME/app
      file:
        path: /home/LDC/app/conf
        state: directory

    - name: Ansible date timestamp example
      debug:
        var: ansible_date_time.time

    - debug: msg="{{ lookup('pipe','date') }}"

    - name: Loop through the tasks
      include_tasks: read-replace-app-token.yaml
      with_items: "{{ lookup('file', '/home/LDC/ansible-inventory-check/conf/webserver/input.txt').splitlines() }}"
      loop_control:
        loop_var: file

    - name: Create the symlink to the extracted code location
      file:
        src: /home/LDC/app/conf
        dest: /home/LDC/current
        state: link

    - name: create a symlink which points to the previous version
      file: /home/LDC/app/conf
        dest: /home/LDC/previous
        state: link

    - name: find out the value of symlink
      stat: path=/home/LDC/previous
      register: symlink

    - debug: var=symlink

    - name: Ansible date timestamp example
      debug:
        var: ansible_date_time.time

    - debug: msg="{{ lookup('pipe','date') }}"



